import boto3
from botocore.exceptions import ClientError

def enumerate_s3_buckets():
    """Lists all S3 buckets for the configured AWS account."""
    s3 = boto3.client('s3')
    try:
        response = s3.list_buckets()
        print("--- AWS S3 Buckets ---")
        if response['Buckets']:
            for bucket in response['Buckets']:
                print(f"  - {bucket['Name']}")
            return [b['Name'] for b in response['Buckets']]
        else:
            print("No S3 buckets found.")
            return []
    except ClientError as e:
        error_code = e.response.get("Error", {}).get("Code")
        if error_code == 'InvalidAccessKeyId' or error_code == 'SignatureDoesNotMatch' or error_code == 'AccessDenied':
            print("AWS authentication failed. Check your credentials.")
        else:
            print(f"AWS Error: {e}")
        return []
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return []

def check_s3_bucket_permissions(bucket_name):
    """Checks the ACL and Policy for a given S3 bucket (basic check)."""
    s3 = boto3.client('s3')
    print(f"\n--- Checking permissions for bucket: {bucket_name} ---")
    
    try:
        # Get Bucket ACL
        acl_response = s3.get_bucket_acl(Bucket=bucket_name)
        print("  ACL:")
        for grant in acl_response['Grants']:
            grantee_type = 'User'
            if 'URI' in grant['Grantee']:
                grantee_type = 'Group'
            print(f"    - Grantee Type: {grantee_type}, Permission: {grant['Permission']}")
            if 'ID' in grant['Grantee']:
                print(f"      ID: {grant['Grantee']['ID']}")
            elif 'DisplayName' in grant['Grantee']:
                print(f"      DisplayName: {grant['Grantee']['DisplayName']}")
            elif 'URI' in grant['Grantee']:
                print(f"      URI: {grant['Grantee']['URI']}")
            
            # Check for "AllUsers" or "AuthenticatedUsers" access
            if 'URI' in grant['Grantee'] and ('http://acs.amazonaws.com/groups/global/AllUsers' in grant['Grantee']['URI'] or 'http://acs.amazonaws.com/groups/global/AuthenticatedUsers' in grant['Grantee']['URI']):
                print(f"      *** WARNING: Public/Authenticated Access via ACL! Permission: {grant['Permission']} ***")

    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchBucket':
            print(f"  Bucket '{bucket_name}' does not exist.")
        elif e.response['Error']['Code'] == 'AccessDenied':
            print(f"  Access denied to read ACL for bucket '{bucket_name}'.")
        else:
            print(f"  Error getting ACL: {e}")
    except Exception as e:
        print(f"  An unexpected error occurred while checking ACL: {e}")

    try:
        # Get Bucket Policy
        policy_response = s3.get_bucket_policy(Bucket=bucket_name)
        policy = policy_response['Policy']
        print("  Policy:")
        print(json.dumps(json.loads(policy), indent=2))
        if '"Principal": "*"' in policy or '"Principal": {"AWS": "*"' in policy:
            print("    *** WARNING: Public access via Bucket Policy! ***")
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchBucketPolicy':
            print("  No bucket policy found.")
        elif e.response['Error']['Code'] == 'AccessDenied':
            print(f"  Access denied to read policy for bucket '{bucket_name}'.")
        else:
            print(f"  Error getting policy: {e}")
    except Exception as e:
        print(f"  An unexpected error occurred while checking policy: {e}")

if __name__ == "__main__":
    print("--- AWS S3 Enumeration Template ---")
    buckets = enumerate_s3_buckets()
    if buckets:
        # Check permissions for the first found bucket, or a specific one
        # For a real scenario, you'd iterate through all buckets or target specific ones
        # check_s3_bucket_permissions(buckets[0])
        print("\nTo check specific bucket permissions, use: check_s3_bucket_permissions('your-bucket-name')")